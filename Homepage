<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Splitter | Convert Long Videos to 5-Minute Clips</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ffmpeg.js/4.2.9003/ffmpeg.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #fef3e2 0%, #fed7aa 100%);
            min-height: 100vh;
        }
        
        .glass-effect {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(12px);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        
        .drop-zone {
            border: 2.5px dashed #cbd5e0;
            transition: all 0.3s ease;
        }
        
        .drop-zone.dragover {
            border-color: #f97316;
            background-color: #fff7ed;
            transform: scale(1.02);
            box-shadow: 0 10px 25px -5px rgba(249, 115, 22, 0.2);
        }
        
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(15px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .success-checkmark {
            width: 80px;
            height: 80px;
            margin: 0 auto;
            border-radius: 50%;
            display: block;
            stroke-width: 2;
            stroke: #10b981;
            stroke-miterlimit: 10;
            box-shadow: inset 0px 0px 0px #10b981;
            animation: fill .4s ease-in-out .4s forwards, scale .3s ease-in-out .9s both;
        }
        
        .check-icon {
            transform-origin: 50% 50%;
            stroke-dasharray: 48;
            stroke-dashoffset: 48;
            animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
        }
        
        @keyframes stroke {
            100% { stroke-dashoffset: 0; }
        }
        
        @keyframes scale {
            0%, 100% { transform: none; }
            50% { transform: scale3d(1.1, 1.1, 1); }
        }
        
        @keyframes fill {
            100% { box-shadow: inset 0px 0px 0px 30px #10b981; }
        }
        
        .tooltip {
            position: relative;
        }
        
        .tooltip .tooltip-text {
            visibility: hidden;
            width: 220px;
            background-color: #1f2937;
            color: #fff;
            text-align: center;
            border-radius: 8px;
            padding: 10px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -110px;
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 0.875rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        
        .tooltip:hover .tooltip-text {
            visibility: visible;
            opacity: 1;
        }
        
        .progress-bar {
            height: 8px;
            background-color: #e5e7eb;
            border-radius: 4px;
            overflow: hidden;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #f97316, #fb923c);
            width: 0%;
            transition: width 0.5s ease;
        }
        
        .video-preview {
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        
        .clip-card {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .clip-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
        
        .size-badge {
            display: inline-flex;
            align-items: center;
            background: linear-gradient(135deg, #10b981, #34d399);
            color: white;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: 500;
        }
        
        .compression-badge {
            display: inline-flex;
            align-items: center;
            background: linear-gradient(135deg, #f97316, #fb923c);
            color: white;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: 500;
        }
        
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 30px;
        }
        
        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }
        
        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 22px;
            width: 22px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        
        input:checked + .toggle-slider {
            background-color: #f97316;
        }
        
        input:checked + .toggle-slider:before {
            transform: translateX(30px);
        }
        
        .preset-btn {
            transition: all 0.3s ease;
        }
        
        .preset-btn.active {
            background-color: #f97316;
            color: white;
            transform: scale(1.05);
        }
        
        .time-badge {
            display: inline-flex;
            align-items: center;
            background: linear-gradient(135deg, #8b5cf6, #a78bfa);
            color: white;
            padding: 4px 10px;
            border-radius: 16px;
            font-size: 0.75rem;
            font-weight: 500;
        }
        
        .segment-timeline {
            background: #f8fafc;
            border-radius: 8px;
            padding: 16px;
            margin-top: 16px;
        }
        
        .timeline-track {
            height: 8px;
            background: #e2e8f0;
            border-radius: 4px;
            position: relative;
            margin: 20px 0;
        }
        
        .timeline-segment {
            position: absolute;
            height: 100%;
            background: #f97316;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .timeline-segment:hover {
            background: #ea580c;
            transform: scaleY(1.2);
        }
        
        .timeline-marker {
            position: absolute;
            top: -6px;
            width: 4px;
            height: 20px;
            background: #1e293b;
            border-radius: 2px;
        }
        
        .segment-label {
            position: absolute;
            top: -30px;
            transform: translateX(-50%);
            font-size: 0.75rem;
            color: #64748b;
            white-space: nowrap;
        }
        
        .video-icon {
            background: linear-gradient(135deg, #f97316, #fb923c);
            color: white;
        }
        
        .clip-controls {
            background: rgba(0, 0, 0, 0.7);
            border-radius: 8px;
            padding: 12px;
            margin-top: 8px;
        }
        
        .waveform {
            height: 60px;
            background: linear-gradient(180deg, #e2e8f0, #cbd5e1);
            border-radius: 4px;
            position: relative;
            overflow: hidden;
        }
        
        .waveform-bar {
            position: absolute;
            bottom: 0;
            width: 4px;
            background: #f97316;
            border-radius: 2px 2px 0 0;
        }
    </style>
</head>
<body class="min-h-screen flex flex-col">
    <!-- Header -->
    <header class="glass-effect py-5 px-6 shadow-sm sticky top-0 z-10">
        <div class="container mx-auto flex justify-between items-center">
            <div class="flex items-center space-x-3">
                <div class="video-icon p-2.5 rounded-xl shadow-md">
                    <i class="fas fa-film text-white text-2xl"></i>
                </div>
                <div>
                    <h1 class="text-2xl font-bold text-gray-800">Video Splitter</h1>
                    <p class="text-gray-600 text-sm">Convert long videos to 5-minute clips</p>
                </div>
            </div>
            <div class="flex space-x-5">
                <button class="text-gray-600 hover:text-orange-600 transition-colors tooltip">
                    <i class="fas fa-info-circle text-xl"></i>
                    <span class="tooltip-text">Learn about video splitting options</span>
                </button>
                <button class="text-gray-600 hover:text-orange-600 transition-colors tooltip">
                    <i class="fas fa-cog text-xl"></i>
                    <span class="tooltip-text">Split settings</span>
                </button>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="flex-grow container mx-auto px-4 py-10">
        <div class="max-w-6xl mx-auto">
            <!-- Hero Section -->
            <section class="text-center mb-14">
                <h2 class="text-4xl md:text-5xl font-bold text-gray-800 mb-5">Split Long Videos into 5-Minute Clips</h2>
                <p class="text-gray-600 text-lg max-w-3xl mx-auto">Perfect for social media, tutorials, or breaking down long recordings into manageable segments. Maintain quality while creating shareable clips.</p>
            </section>
            
            <!-- Upload Section -->
            <section class="bg-white rounded-2xl shadow-xl p-7 mb-10 fade-in">
                <div class="drop-zone rounded-xl p-10 text-center cursor-pointer transition-all duration-300" id="dropZone">
                    <div class="flex flex-col items-center justify-center">
                        <div class="bg-orange-100 p-5 rounded-2xl mb-5 shadow-inner">
                            <i class="fas fa-video text-orange-600 text-5xl"></i>
                        </div>
                        <h3 class="text-2xl font-semibold text-gray-800 mb-3">Upload Your Video</h3>
                        <p class="text-gray-500 mb-5 text-lg">Drag & drop your video file here or click to browse</p>
                        <button class="bg-orange-600 hover:bg-orange-700 text-white font-medium py-3.5 px-10 rounded-xl transition-colors duration-300 flex items-center shadow-md hover:shadow-lg" id="browseBtn">
                            <i class="fas fa-folder-open mr-3"></i>
                            Browse Files
                        </button>
                        <input type="file" id="fileInput" accept="video/*" class="hidden">
                    </div>
                </div>
                
                <div class="mt-6 text-center text-gray-500">
                    <p class="flex items-center justify-center"><i class="fas fa-lock mr-2 text-orange-500"></i> Your video is processed locally in your browser</p>
                </div>
            </section>
            
            <!-- Video Preview & Split Options Section -->
            <section class="bg-white rounded-2xl shadow-xl p-7 mb-10 hidden fade-in" id="splitSection">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-semibold text-gray-800">Split Settings</h2>
                    <span class="compression-badge">
                        <i class="fas fa-scissors mr-2"></i> Split Video
                    </span>
                </div>
                
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <!-- Split Settings -->
                    <div class="space-y-6">
                        <h3 class="text-xl font-medium text-gray-800 border-b pb-2">Split Options</h3>
                        
                        <div>
                            <div class="flex justify-between mb-2">
                                <label class="block text-sm font-medium text-gray-700">Clip Duration</label>
                                <span class="text-sm font-medium text-orange-600" id="durationValue">5 minutes</span>
                            </div>
                            <input type="range" min="1" max="10" value="5" class="quality-slider" id="durationSlider">
                            <div class="flex justify-between text-xs text-gray-500 mt-1">
                                <span>1 min</span>
                                <span>10 min</span>
                            </div>
                        </div>
                        
                        <div>
                            <h4 class="text-sm font-medium text-gray-700 mb-3">Split Method</h4>
                            <div class="grid grid-cols-2 gap-3">
                                <button class="preset-btn py-3 bg-gray-100 rounded-xl transition-all active" data-method="equal">
                                    <div class="flex flex-col items-center">
                                        <i class="fas fa-equals text-orange-600 text-xl mb-2"></i>
                                        <span class="text-sm font-medium">Equal Parts</span>
                                        <p class="text-xs text-gray-500 mt-1">Split into equal segments</p>
                                    </div>
                                </button>
                                <button class="preset-btn py-3 bg-gray-100 rounded-xl transition-all" data-method="manual">
                                    <div class="flex flex-col items-center">
                                        <i class="fas fa-sliders-h text-orange-600 text-xl mb-2"></i>
                                        <span class="text-sm font-medium">Custom</span>
                                        <p class="text-xs text-gray-500 mt-1">Set custom split points</p>
                                    </div>
                                </button>
                            </div>
                        </div>
                        
                        <div class="flex items-center justify-between p-4 bg-gray-50 rounded-xl">
                            <div>
                                <h4 class="font-medium text-gray-800">Maintain Quality</h4>
                                <p class="text-gray-600 text-sm">Keep original video quality (larger files)</p>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" id="maintainQuality" checked>
                                <span class="toggle-slider"></span>
                            </label>
                        </div>
                        
                        <div class="flex items-center justify-between p-4 bg-gray-50 rounded-xl">
                            <div>
                                <h4 class="font-medium text-gray-800">Add Watermark</h4>
                                <p class="text-gray-600 text-sm">Include a small watermark in clips</p>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" id="addWatermark">
                                <span class="toggle-slider"></span>
                            </label>
                        </div>
                        
                        <div class="bg-orange-50 p-4 rounded-xl">
                            <div class="flex items-start">
                                <i class="fas fa-lightbulb text-orange-500 mt-1 mr-3"></i>
                                <div>
                                    <h4 class="font-medium text-orange-800">Optimal Settings</h4>
                                    <p class="text-orange-700 text-sm mt-1">5-minute clips work best for most social media platforms and maintain viewer engagement.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Video Preview -->
                    <div class="space-y-6">
                        <h3 class="text-xl font-medium text-gray-800 border-b pb-2">Video Preview</h3>
                        
                        <div class="text-center p-6 bg-gray-50 rounded-xl" id="previewContainer">
                            <p class="text-gray-500" id="previewPlaceholder">Your video preview will appear here</p>
                            <div class="hidden" id="videoPreview">
                                <div class="video-preview mb-4 bg-black rounded-xl overflow-hidden">
                                    <video id="videoPlayer" controls class="w-full max-h-64">
                                        Your browser does not support the video tag.
                                    </video>
                                </div>
                                
                                <div class="flex justify-between items-center mb-3">
                                    <div>
                                        <span class="time-badge" id="videoDuration">00:00</span>
                                        <span class="text-sm text-gray-600 ml-2" id="videoSize">-</span>
                                    </div>
                                    <div class="text-sm text-gray-600" id="clipCount">0 clips</div>
                                </div>
                                
                                <!-- Segment Timeline -->
                                <div class="segment-timeline">
                                    <h4 class="text-sm font-medium text-gray-700 mb-2">Video Segments</h4>
                                    <div class="timeline-track" id="timelineTrack">
                                        <!-- Timeline segments will be inserted here -->
                                    </div>
                                    <div class="text-xs text-gray-500 text-center">
                                        Drag segments to adjust split points
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="mt-8 pt-6 border-t border-gray-200 flex justify-between items-center">
                    <button class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-3.5 px-8 rounded-xl transition-colors duration-300 flex items-center" id="changeVideoBtn">
                        <i class="fas fa-arrow-left mr-3"></i>
                        Change Video
                    </button>
                    <button class="bg-orange-600 hover:bg-orange-700 text-white font-medium py-3.5 px-10 rounded-xl transition-colors duration-300 flex items-center shadow-md hover:shadow-lg" id="splitBtn">
                        <i class="fas fa-scissors mr-3"></i>
                        <span id="splitText">Split Video into Clips</span>
                        <span class="loading-spinner ml-2 hidden" id="splitSpinner"></span>
                    </button>
                </div>
            </section>
            
            <!-- Progress Section -->
            <section class="bg-white rounded-2xl shadow-xl p-7 mb-10 hidden fade-in" id="progressSection">
                <h2 class="text-2xl font-semibold text-gray-800 mb-6">Splitting Your Video</h2>
                
                <div class="max-w-2xl mx-auto">
                    <div class="progress-bar mb-5">
                        <div class="progress-fill" id="progressFill"></div>
                    </div>
                    <p class="text-center text-gray-600 text-lg" id="progressText">Processing your video...</p>
                    
                    <div class="mt-8 grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                        <div class="p-4 bg-blue-50 rounded-xl">
                            <p class="text-sm text-blue-600">Current Clip</p>
                            <p class="text-2xl font-bold text-blue-700" id="currentClip">1/0</p>
                        </div>
                        <div class="p-4 bg-green-50 rounded-xl">
                            <p class="text-sm text-green-600">Time Remaining</p>
                            <p class="text-2xl font-bold text-green-700" id="timeRemaining">--:--</p>
                        </div>
                        <div class="p-4 bg-purple-50 rounded-xl">
                            <p class="text-sm text-purple-600">File Size</p>
                            <p class="text-2xl font-bold text-purple-700" id="processedSize">0 MB</p>
                        </div>
                    </div>
                </div>
            </section>
            
            <!-- Results Section -->
            <section class="bg-white rounded-2xl shadow-xl p-7 mb-10 hidden fade-in" id="resultsSection">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-semibold text-gray-800">Split Results</h2>
                    <span class="size-badge">
                        <i class="fas fa-check-circle mr-2"></i> Split Complete
                    </span>
                </div>
                
                <div class="text-center mb-8" id="resultsSummary">
                    <!-- Results summary will be inserted here -->
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="resultsContainer">
                    <!-- Video clips will be inserted here -->
                </div>
                
                <div class="mt-8 pt-6 border-t border-gray-200 flex justify-end">
                    <button class="bg-green-600 hover:bg-green-700 text-white font-medium py-3.5 px-10 rounded-xl transition-colors duration-300 flex items-center shadow-md hover:shadow-lg" id="downloadAllBtn">
                        <i class="fas fa-download mr-3"></i>
                        Download All Clips
                    </button>
                </div>
            </section>
            
            <!-- Features Section -->
            <section class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mt-16">
                <div class="feature-card bg-white rounded-xl shadow-lg p-6 text-center fade-in">
                    <div class="bg-orange-100 w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-5">
                        <i class="fas fa-clock text-orange-600 text-2xl"></i>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-800 mb-3">Perfect Timing</h3>
                    <p class="text-gray-600">5-minute clips optimized for engagement and platform limits.</p>
                </div>
                
                <div class="feature-card bg-white rounded-xl shadow-lg p-6 text-center fade-in">
                    <div class="bg-blue-100 w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-5">
                        <i class="fas fa-shield-alt text-blue-600 text-2xl"></i>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-800 mb-3">Privacy First</h3>
                    <p class="text-gray-600">All processing happens locally. Your videos never leave your device.</p>
                </div>
                
                <div class="feature-card bg-white rounded-xl shadow-lg p-6 text-center fade-in">
                    <div class="bg-purple-100 w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-5">
                        <i class="fas fa-sliders-h text-purple-600 text-2xl"></i>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-800 mb-3">Customizable</h3>
                    <p class="text-gray-600">Adjust clip length and split points to your needs.</p>
                </div>
                
                <div class="feature-card bg-white rounded-xl shadow-lg p-6 text-center fade-in">
                    <div class="bg-red-100 w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-5">
                        <i class="fas fa-bolt text-red-600 text-2xl"></i>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-800 mb-3">Fast Processing</h3>
                    <p class="text-gray-600">Quickly split videos without quality loss.</p>
                </div>
            </section>
            
            <!-- Use Cases Section -->
            <section class="bg-white rounded-2xl shadow-xl p-8 mt-12 fade-in">
                <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">Perfect For</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div>
                        <h3 class="text-xl font-semibold text-gray-800 mb-4">Content Creation</h3>
                        <ul class="space-y-3 text-gray-600">
                            <li class="flex items-start">
                                <i class="fas fa-check text-green-500 mt-1 mr-3"></i>
                                <span><strong>YouTube Shorts</strong> - Create engaging short-form content</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-green-500 mt-1 mr-3"></i>
                                <span><strong>TikTok/Reels</strong> - Perfect length for viral content</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-green-500 mt-1 mr-3"></i>
                                <span><strong>Tutorials</strong> - Break down long tutorials into digestible parts</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-green-500 mt-1 mr-3"></i>
                                <span><strong>Podcasts</strong> - Create highlight clips from long recordings</span>
                            </li>
                        </ul>
                    </div>
                    <div>
                        <h3 class="text-xl font-semibold text-gray-800 mb-4">Professional Use</h3>
                        <ul class="space-y-3 text-gray-600">
                            <li class="flex items-start">
                                <i class="fas fa-star text-orange-500 mt-1 mr-3"></i>
                                <span><strong>Training Videos</strong> - Segment lengthy training sessions</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-star text-orange-500 mt-1 mr-3"></i>
                                <span><strong>Presentations</strong> - Share key segments with stakeholders</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-star text-orange-500 mt-1 mr-3"></i>
                                <span><strong>Event Coverage</strong> - Highlight memorable moments from events</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-star text-orange-500 mt-1 mr-3"></i>
                                <span><strong>Social Media Marketing</strong> - Repurpose content across platforms</span>
                            </li>
                        </ul>
                    </div>
                </div>
            </section>
        </div>
    </main>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-10 mt-16">
        <div class="container mx-auto px-4">
            <div class="flex flex-col md:flex-row justify-between items-center">
                <div class="mb-6 md:mb-0">
                    <div class="flex items-center space-x-3">
                        <div class="bg-orange-600 p-2.5 rounded-xl">
                            <i class="fas fa-film text-white"></i>
                        </div>
                        <h2 class="text-xl font-bold">Video Splitter</h2>
                    </div>
                    <p class="text-gray-400 mt-3">Convert long videos into perfect 5-minute clips.</p>
                </div>
                
                <div class="flex space-x-8">
                    <a href="#" class="text-gray-400 hover:text-white transition-colors">Privacy Policy</a>
                    <a href="#" class="text-gray-400 hover:text-white transition-colors">Terms of Service</a>
                    <a href="#" class="text-gray-400 hover:text-white transition-colors">Contact</a>
                </div>
            </div>
            
            <div class="border-t border-gray-700 mt-8 pt-8 text-center text-gray-400">
                <p>&copy; 2023 Video Splitter. All rights reserved.</p>
            </div>
        </div>
    </footer>

    <script>
        // DOM Elements
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('fileInput');
        const browseBtn = document.getElementById('browseBtn');
        const splitSection = document.getElementById('splitSection');
        const durationSlider = document.getElementById('durationSlider');
        const durationValue = document.getElementById('durationValue');
        const methodButtons = document.querySelectorAll('.preset-btn[data-method]');
        const maintainQuality = document.getElementById('maintainQuality');
        const addWatermark = document.getElementById('addWatermark');
        const previewContainer = document.getElementById('previewContainer');
        const previewPlaceholder = document.getElementById('previewPlaceholder');
        const videoPreview = document.getElementById('videoPreview');
        const videoPlayer = document.getElementById('videoPlayer');
        const videoDuration = document.getElementById('videoDuration');
        const videoSize = document.getElementById('videoSize');
        const clipCount = document.getElementById('clipCount');
        const timelineTrack = document.getElementById('timelineTrack');
        const changeVideoBtn = document.getElementById('changeVideoBtn');
        const splitBtn = document.getElementById('splitBtn');
        const splitText = document.getElementById('splitText');
        const splitSpinner = document.getElementById('splitSpinner');
        const progressSection = document.getElementById('progressSection');
        const progressFill = document.getElementById('progressFill');
        const progressText = document.getElementById('progressText');
        const currentClip = document.getElementById('currentClip');
        const timeRemaining = document.getElementById('timeRemaining');
        const processedSize = document.getElementById('processedSize');
        const resultsSection = document.getElementById('resultsSection');
        const resultsSummary = document.getElementById('resultsSummary');
        const resultsContainer = document.getElementById('resultsContainer');
        const downloadAllBtn = document.getElementById('downloadAllBtn');
        
        // Variables
        let selectedFile = null;
        let videoClips = [];
        let selectedMethod = 'equal';
        let videoDurationSeconds = 0;
        
        // Event Listeners
        browseBtn.addEventListener('click', () => fileInput.click());
        fileInput.addEventListener('change', handleFileSelect);
        dropZone.addEventListener('dragover', handleDragOver);
        dropZone.addEventListener('dragleave', handleDragLeave);
        dropZone.addEventListener('drop', handleDrop);
        durationSlider.addEventListener('input', updateDurationValue);
        methodButtons.forEach(btn => {
            btn.addEventListener('click', function() {
                methodButtons.forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                selectedMethod = this.getAttribute('data-method');
                
                // Update timeline based on method
                if (selectedFile) {
                    updateTimeline();
                }
            });
        });
        changeVideoBtn.addEventListener('click', resetUpload);
        splitBtn.addEventListener('click', splitVideo);
        downloadAllBtn.addEventListener('click', downloadAllClips);
        
        // Functions
        function handleDragOver(e) {
            e.preventDefault();
            dropZone.classList.add('dragover');
        }
        
        function handleDragLeave(e) {
            e.preventDefault();
            dropZone.classList.remove('dragover');
        }
        
        function handleDrop(e) {
            e.preventDefault();
            dropZone.classList.remove('dragover');
            
            if (e.dataTransfer.files.length) {
                const file = e.dataTransfer.files[0];
                if (file.type.startsWith('video/')) {
                    handleFile(file);
                } else {
                    showError('Please upload a valid video file.');
                }
            }
        }
        
        function handleFileSelect(e) {
            if (e.target.files.length) {
                const file = e.target.files[0];
                handleFile(file);
            }
        }
        
        function handleFile(file) {
            if (file.size > 500 * 1024 * 1024) {
                showError('File size exceeds 500MB limit. Please choose a smaller video.');
                return;
            }
            
            selectedFile = file;
            
            // Show split section
            splitSection.classList.remove('hidden');
            splitSection.classList.add('fade-in');
            
            // Scroll to split section
            splitSection.scrollIntoView({ behavior: 'smooth' });
            
            // Update UI
            dropZone.innerHTML = `
                <div class="flex flex-col items-center justify-center">
                    <div class="bg-green-100 p-5 rounded-2xl mb-5 shadow-inner">
                        <i class="fas fa-check text-green-600 text-5xl"></i>
                    </div>
                    <h3 class="text-2xl font-semibold text-gray-800 mb-3">Video Ready to Split</h3>
                    <p class="text-gray-500 mb-5 text-lg">${selectedFile.name}</p>
                    <button class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2.5 px-8 rounded-xl transition-colors duration-300" id="changeFileBtn">
                        Change Video
                    </button>
                </div>
            `;
            
            document.getElementById('changeFileBtn').addEventListener('click', resetUpload);
            
            // Preview the video
            previewVideo(selectedFile);
        }
        
        function previewVideo(file) {
            const url = URL.createObjectURL(file);
            
            previewPlaceholder.classList.add('hidden');
            videoPreview.classList.remove('hidden');
            
            videoPlayer.src = url;
            
            // Format file size
            const fileSize = formatFileSize(file.size);
            videoSize.textContent = fileSize;
            
            // Wait for video metadata to load
            videoPlayer.addEventListener('loadedmetadata', function() {
                videoDurationSeconds = videoPlayer.duration;
                videoDuration.textContent = formatTime(videoPlayer.duration);
                
                // Update clip count
                updateClipCount();
                
                // Create timeline
                updateTimeline();
            });
        }
        
        function updateDurationValue() {
            const value = durationSlider.value;
            durationValue.textContent = `${value} minute${value > 1 ? 's' : ''}`;
            
            // Update clip count if we have a video
            if (selectedFile) {
                updateClipCount();
                updateTimeline();
            }
        }
        
        function updateClipCount() {
            if (videoDurationSeconds > 0) {
                const clipDuration = parseInt(durationSlider.value) * 60; // Convert to seconds
                const count = Math.ceil(videoDurationSeconds / clipDuration);
                clipCount.textContent = `${count} clip${count > 1 ? 's' : ''}`;
            }
        }
        
        function updateTimeline() {
            if (videoDurationSeconds <= 0) return;
            
            const clipDuration = parseInt(durationSlider.value) * 60; // Convert to seconds
            const clipCount = Math.ceil(videoDurationSeconds / clipDuration);
            
            timelineTrack.innerHTML = '';
            
            // Create waveform visualization (simulated)
            createWaveform();
            
            // Create segments
            for (let i = 0; i < clipCount; i++) {
                const startTime = i * clipDuration;
                const endTime = Math.min((i + 1) * clipDuration, videoDurationSeconds);
                const duration = endTime - startTime;
                
                const segmentWidth = (duration / videoDurationSeconds) * 100;
                const segmentLeft = (startTime / videoDurationSeconds) * 100;
                
                const segment = document.createElement('div');
                segment.className = 'timeline-segment';
                segment.style.width = `${segmentWidth}%`;
                segment.style.left = `${segmentLeft}%`;
                segment.dataset.index = i;
                segment.dataset.start = startTime;
                segment.dataset.end = endTime;
                
                // Add click event to seek to that segment
                segment.addEventListener('click', function() {
                    videoPlayer.currentTime = startTime;
                    videoPlayer.play();
                });
                
                // Add label
                const label = document.createElement('div');
                label.className = 'segment-label';
                label.style.left = `${segmentLeft + segmentWidth / 2}%`;
                label.textContent = `Clip ${i + 1}`;
                
                timelineTrack.appendChild(label);
                timelineTrack.appendChild(segment);
            }
        }
        
        function createWaveform() {
            // This is a simulated waveform - in a real app, you would analyze the audio
            const waveform = document.createElement('div');
            waveform.className = 'waveform';
            
            // Create random bars for visualization
            for (let i = 0; i < 100; i++) {
                const bar = document.createElement('div');
                bar.className = 'waveform-bar';
                bar.style.left = `${i}%`;
                bar.style.height = `${20 + Math.random() * 40}%`;
                waveform.appendChild(bar);
            }
            
            timelineTrack.appendChild(waveform);
        }
        
        function resetUpload() {
            selectedFile = null;
            videoClips = [];
            splitSection.classList.add('hidden');
            progressSection.classList.add('hidden');
            resultsSection.classList.add('hidden');
            
            if (videoPlayer.src) {
                URL.revokeObjectURL(videoPlayer.src);
                videoPlayer.src = '';
            }
            
            dropZone.innerHTML = `
                <div class="flex flex-col items-center justify-center">
                    <div class="bg-orange-100 p-5 rounded-2xl mb-5 shadow-inner">
                        <i class="fas fa-video text-orange-600 text-5xl"></i>
                    </div>
                    <h3 class="text-2xl font-semibold text-gray-800 mb-3">Upload Your Video</h3>
                    <p class="text-gray-500 mb-5 text-lg">Drag & drop your video file here or click to browse</p>
                    <button class="bg-orange-600 hover:bg-orange-700 text-white font-medium py-3.5 px-10 rounded-xl transition-colors duration-300 flex items-center shadow-md hover:shadow-lg" id="browseBtn">
                        <i class="fas fa-folder-open mr-3"></i>
                        Browse Files
                    </button>
                </div>
            `;
            
            document.getElementById('browseBtn').addEventListener('click', () => fileInput.click());
            fileInput.value = '';
            
            // Reset preview
            previewPlaceholder.classList.remove('hidden');
            videoPreview.classList.add('hidden');
        }
        
        function splitVideo() {
            if (!selectedFile) {
                showError('Please select a video to split.');
                return;
            }
            
            // Show loading state
            splitText.textContent = 'Splitting...';
            splitSpinner.classList.remove('hidden');
            splitBtn.disabled = true;
            
            // Show progress section
            progressSection.classList.remove('hidden');
            progressSection.classList.add('fade-in');
            
            // Scroll to progress section
            progressSection.scrollIntoView({ behavior: 'smooth' });
            
            // Reset results
            videoClips = [];
            resultsContainer.innerHTML = '';
            
            // Calculate clips
            const clipDuration = parseInt(durationSlider.value) * 60; // Convert to seconds
            const totalClips = Math.ceil(videoDurationSeconds / clipDuration);
            
            // Simulate processing (in a real app, you would use FFmpeg or similar)
            let processed = 0;
            
            const processInterval = setInterval(() => {
                processed++;
                const progress = (processed / totalClips) * 100;
                progressFill.style.width = `${progress}%`;
                
                currentClip.textContent = `${processed}/${totalClips}`;
                
                // Simulate time remaining
                const remaining = Math.round((totalClips - processed) * 2.5);
                timeRemaining.textContent = `${remaining}s`;
                
                // Simulate file size
                const size = Math.round((processed / totalClips) * (selectedFile.size / (1024 * 1024)));
                processedSize.textContent = `${size} MB`;
                
                progressText.textContent = `Processing clip ${processed} of ${totalClips}...`;
                
                // Create a simulated clip
                if (processed <= totalClips) {
                    const startTime = (processed - 1) * clipDuration;
                    const endTime = Math.min(processed * clipDuration, videoDurationSeconds);
                    
                    // In a real implementation, you would actually split the video here
                    // For this demo, we'll create a simulated result
                    const clip = {
                        index: processed,
                        start: startTime,
                        end: endTime,
                        duration: endTime - startTime,
                        name: `clip_${processed}.mp4`,
                        // In a real app, this would be the actual clip blob
                        // For demo, we'll use the original video
                        blob: selectedFile
                    };
                    
                    videoClips.push(clip);
                }
                
                // Check if all clips are processed
                if (processed >= totalClips) {
                    clearInterval(processInterval);
                    
                    // Hide progress section
                    progressSection.classList.add('hidden');
                    
                    // Show results section
                    showResults();
                    
                    // Reset button state
                    splitText.textContent = 'Split Video into Clips';
                    splitSpinner.classList.add('hidden');
                    splitBtn.disabled = false;
                }
            }, 800); // Simulate processing time
        }
        
        function showResults() {
            // Update results summary
            resultsSummary.innerHTML = `
                <div class="bg-gradient-to-r from-orange-50 to-green-50 p-6 rounded-2xl shadow-sm">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                        <div>
                            <p class="text-sm text-gray-600">Original Video</p>
                            <p class="text-2xl font-bold text-gray-800">${formatTime(videoDurationSeconds)}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Number of Clips</p>
                            <p class="text-2xl font-bold text-orange-600">${videoClips.length}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Clip Duration</p>
                            <p class="text-2xl font-bold text-green-600">${durationSlider.value} min</p>
                        </div>
                    </div>
                </div>
            `;
            
            // Add video clips to results
            videoClips.forEach((clip, index) => {
                const clipCard = document.createElement('div');
                clipCard.className = 'clip-card bg-white rounded-xl shadow-md overflow-hidden fade-in';
                clipCard.innerHTML = `
                    <div class="p-4 border-b flex justify-between items-center">
                        <h4 class="font-medium text-gray-800">${clip.name}</h4>
                        <span class="time-badge">${formatTime(clip.duration)}</span>
                    </div>
                    <div class="p-4">
                        <div class="bg-gray-800 rounded-lg overflow-hidden mb-3 aspect-video flex items-center justify-center">
                            <i class="fas fa-play-circle text-white text-4xl opacity-70"></i>
                        </div>
                        <div class="grid grid-cols-2 gap-2 text-sm mb-3">
                            <div class="text-center p-2 bg-gray-100 rounded">
                                <p class="text-gray-600">Start</p>
                                <p class="font-medium">${formatTime(clip.start)}</p>
                            </div>
                            <div class="text-center p-2 bg-gray-100 rounded">
                                <p class="text-gray-600">End</p>
                                <p class="font-medium">${formatTime(clip.end)}</p>
                            </div>
                        </div>
                        <button class="w-full bg-orange-600 hover:bg-orange-700 text-white py-2 rounded-lg transition-colors download-clip-btn" data-index="${index}">
                            <i class="fas fa-download mr-2"></i> Download Clip
                        </button>
                    </div>
                `;
                
                resultsContainer.appendChild(clipCard);
            });
            
            // Add event listeners to download buttons
            document.querySelectorAll('.download-clip-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const index = parseInt(this.getAttribute('data-index'));
                    downloadClip(videoClips[index]);
                });
            });
            
            // Show results section
            resultsSection.classList.remove('hidden');
            resultsSection.classList.add('fade-in');
            
            // Scroll to results section
            resultsSection.scrollIntoView({ behavior: 'smooth' });
        }
        
        function downloadClip(clip) {
            // In a real implementation, this would download the actual clip
            // For this demo, we'll simulate the download
            const link = document.createElement('a');
            // In a real app: link.href = URL.createObjectURL(clip.blob);
            // For demo, we'll use a dummy URL
            link.href = '#';
            link.download = clip.name;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // Show a confirmation message
            showSuccess(`Downloading ${clip.name}...`);
        }
        
        function downloadAllClips() {
            videoClips.forEach((clip, index) => {
                setTimeout(() => {
                    downloadClip(clip);
                }, index * 500); // Stagger downloads
            });
            
            // Show a confirmation message
            const originalText = downloadAllBtn.innerHTML;
            downloadAllBtn.innerHTML = '<i class="fas fa-check mr-3"></i> Downloads Started!';
            downloadAllBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
            downloadAllBtn.classList.add('bg-gray-600');
            downloadAllBtn.disabled = true;
            
            setTimeout(() => {
                downloadAllBtn.innerHTML = originalText;
                downloadAllBtn.classList.remove('bg-gray-600');
                downloadAllBtn.classList.add('bg-green-600', 'hover:bg-green-700');
                downloadAllBtn.disabled = false;
            }, 3000);
        }
        
        function formatTime(seconds) {
            const mins = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
        }
        
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        
        function showError(message) {
            // Create error notification
            const errorDiv = document.createElement('div');
            errorDiv.className = 'fixed top-4 right-4 bg-red-500 text-white p-4 rounded-xl shadow-lg z-50 fade-in max-w-sm';
            errorDiv.innerHTML = `
                <div class="flex items-start">
                    <i class="fas fa-exclamation-triangle mr-3 mt-0.5"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(errorDiv);
            
            // Remove error after 5 seconds
            setTimeout(() => {
                errorDiv.classList.remove('fade-in');
                errorDiv.classList.add('fade-out');
                setTimeout(() => {
                    document.body.removeChild(errorDiv);
                }, 500);
            }, 5000);
        }
        
        function showSuccess(message) {
            // Create success notification
            const successDiv = document.createElement('div');
            successDiv.className = 'fixed top-4 right-4 bg-green-500 text-white p-4 rounded-xl shadow-lg z-50 fade-in max-w-sm';
            successDiv.innerHTML = `
                <div class="flex items-start">
                    <i class="fas fa-check-circle mr-3 mt-0.5"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(successDiv);
            
            // Remove success after 5 seconds
            setTimeout(() => {
                successDiv.classList.remove('fade-in');
                successDiv.classList.add('fade-out');
                setTimeout(() => {
                    document.body.removeChild(successDiv);
                }, 500);
            }, 3000);
        }
        
        // Initialize
        updateDurationValue();
    </script>
</body>
</html>
